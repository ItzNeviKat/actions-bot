import Router, { RouterContext } from '@koa/router';
import * as crypto from 'crypto';

import { sendMessage } from './vk';

export const router = new Router();

router.post('/payload', async (context: RouterContext) => {
  const signature: string | undefined = context.headers[
    'x-hub-signature-256'
  ] as string | undefined;

  const resultSignature: string =
    'sha256=' +
    crypto
      .createHmac('sha256', 'VzHcuV9L-4i6xYe')
      .update(JSON.stringify(context.request.body))
      .digest('hex');

  if (signature !== resultSignature)
    return (context.body = 'Invalid signature');

  const body: Record<string, any> = context.request.body;

  if (body.action === 'created') {
    await sendMessage(`
      üìñ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${body.repository.name}

      üé¨ –ó–∞–ø—É—â–µ–Ω Github Action —Å –∏–º–µ–Ω–µ–º ${body.check_run.name} (id:${body.check_run.id})
      üìé –°—Å—ã–ª–∫–∞ - ${body.check_run.details_url}
    `);
  } else if (body.action === 'completed') {
    if (body.check_run.conclusion === 'success') {
      await sendMessage(`
      üìñ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${body.repository.name}

      ü§ô –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω Github Action —Å –∏–º–µ–Ω–µ–º ${body.check_run.name} (id:${
        body.check_run.id
      })
      ‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - ${Math.round(
        (new Date(body.check_run.completed_at).getTime() -
          new Date(body.check_run.started_at).getTime()) /
          1000
      )} —Å–µ–∫—É–Ω–¥
      üìé –°—Å—ã–ª–∫–∞ - ${body.check_run.details_url}
    `);
    } else {
      await sendMessage(`
      üìñ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${body.repository.name}

      ‚ùóÔ∏è –° –æ—à–∏–±–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω Github Action —Å –∏–º–µ–Ω–µ–º ${
        body.check_run.name
      } (id:${body.check_run.id})
      ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - ${Math.round(
        (new Date(body.check_run.completed_at).getTime() -
          new Date(body.check_run.started_at).getTime()) /
          1000
      )} —Å–µ–∫—É–Ω–¥
      üìé –°—Å—ã–ª–∫–∞ - ${body.check_run.details_url}

      @all
    `);
    }
  }

  return (context.body = 'ok');
});
